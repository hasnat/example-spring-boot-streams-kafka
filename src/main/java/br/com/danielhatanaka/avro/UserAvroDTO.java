/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.danielhatanaka.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class UserAvroDTO extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7870128299180573352L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserAvroDTO\",\"namespace\":\"br.com.danielhatanaka.avro\",\"fields\":[{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"teste\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"teste2\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"lastName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<UserAvroDTO> ENCODER =
      new BinaryMessageEncoder<UserAvroDTO>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<UserAvroDTO> DECODER =
      new BinaryMessageDecoder<UserAvroDTO>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<UserAvroDTO> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<UserAvroDTO> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<UserAvroDTO>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this UserAvroDTO to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a UserAvroDTO from a ByteBuffer. */
  public static UserAvroDTO fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.String name;
   private java.lang.String teste;
   private java.lang.String teste2;
   private java.lang.String lastName;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserAvroDTO() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param teste The new value for teste
   * @param teste2 The new value for teste2
   * @param lastName The new value for lastName
   */
  public UserAvroDTO(java.lang.String name, java.lang.String teste, java.lang.String teste2, java.lang.String lastName) {
    this.name = name;
    this.teste = teste;
    this.teste2 = teste2;
    this.lastName = lastName;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return teste;
    case 2: return teste2;
    case 3: return lastName;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.String)value$; break;
    case 1: teste = (java.lang.String)value$; break;
    case 2: teste2 = (java.lang.String)value$; break;
    case 3: lastName = (java.lang.String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'teste' field.
   * @return The value of the 'teste' field.
   */
  public java.lang.String getTeste() {
    return teste;
  }

  /**
   * Sets the value of the 'teste' field.
   * @param value the value to set.
   */
  public void setTeste(java.lang.String value) {
    this.teste = value;
  }

  /**
   * Gets the value of the 'teste2' field.
   * @return The value of the 'teste2' field.
   */
  public java.lang.String getTeste2() {
    return teste2;
  }

  /**
   * Sets the value of the 'teste2' field.
   * @param value the value to set.
   */
  public void setTeste2(java.lang.String value) {
    this.teste2 = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   * @return The value of the 'lastName' field.
   */
  public java.lang.String getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.String value) {
    this.lastName = value;
  }

  /**
   * Creates a new UserAvroDTO RecordBuilder.
   * @return A new UserAvroDTO RecordBuilder
   */
  public static br.com.danielhatanaka.avro.UserAvroDTO.Builder newBuilder() {
    return new br.com.danielhatanaka.avro.UserAvroDTO.Builder();
  }

  /**
   * Creates a new UserAvroDTO RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserAvroDTO RecordBuilder
   */
  public static br.com.danielhatanaka.avro.UserAvroDTO.Builder newBuilder(br.com.danielhatanaka.avro.UserAvroDTO.Builder other) {
    return new br.com.danielhatanaka.avro.UserAvroDTO.Builder(other);
  }

  /**
   * Creates a new UserAvroDTO RecordBuilder by copying an existing UserAvroDTO instance.
   * @param other The existing instance to copy.
   * @return A new UserAvroDTO RecordBuilder
   */
  public static br.com.danielhatanaka.avro.UserAvroDTO.Builder newBuilder(br.com.danielhatanaka.avro.UserAvroDTO other) {
    return new br.com.danielhatanaka.avro.UserAvroDTO.Builder(other);
  }

  /**
   * RecordBuilder for UserAvroDTO instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserAvroDTO>
    implements org.apache.avro.data.RecordBuilder<UserAvroDTO> {

    private java.lang.String name;
    private java.lang.String teste;
    private java.lang.String teste2;
    private java.lang.String lastName;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.danielhatanaka.avro.UserAvroDTO.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.teste)) {
        this.teste = data().deepCopy(fields()[1].schema(), other.teste);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.teste2)) {
        this.teste2 = data().deepCopy(fields()[2].schema(), other.teste2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserAvroDTO instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.danielhatanaka.avro.UserAvroDTO other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.teste)) {
        this.teste = data().deepCopy(fields()[1].schema(), other.teste);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.teste2)) {
        this.teste2 = data().deepCopy(fields()[2].schema(), other.teste2);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.lastName)) {
        this.lastName = data().deepCopy(fields()[3].schema(), other.lastName);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }

    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public br.com.danielhatanaka.avro.UserAvroDTO.Builder setName(java.lang.String value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public br.com.danielhatanaka.avro.UserAvroDTO.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'teste' field.
      * @return The value.
      */
    public java.lang.String getTeste() {
      return teste;
    }

    /**
      * Sets the value of the 'teste' field.
      * @param value The value of 'teste'.
      * @return This builder.
      */
    public br.com.danielhatanaka.avro.UserAvroDTO.Builder setTeste(java.lang.String value) {
      validate(fields()[1], value);
      this.teste = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'teste' field has been set.
      * @return True if the 'teste' field has been set, false otherwise.
      */
    public boolean hasTeste() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'teste' field.
      * @return This builder.
      */
    public br.com.danielhatanaka.avro.UserAvroDTO.Builder clearTeste() {
      teste = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'teste2' field.
      * @return The value.
      */
    public java.lang.String getTeste2() {
      return teste2;
    }

    /**
      * Sets the value of the 'teste2' field.
      * @param value The value of 'teste2'.
      * @return This builder.
      */
    public br.com.danielhatanaka.avro.UserAvroDTO.Builder setTeste2(java.lang.String value) {
      validate(fields()[2], value);
      this.teste2 = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'teste2' field has been set.
      * @return True if the 'teste2' field has been set, false otherwise.
      */
    public boolean hasTeste2() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'teste2' field.
      * @return This builder.
      */
    public br.com.danielhatanaka.avro.UserAvroDTO.Builder clearTeste2() {
      teste2 = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'lastName' field.
      * @return The value.
      */
    public java.lang.String getLastName() {
      return lastName;
    }

    /**
      * Sets the value of the 'lastName' field.
      * @param value The value of 'lastName'.
      * @return This builder.
      */
    public br.com.danielhatanaka.avro.UserAvroDTO.Builder setLastName(java.lang.String value) {
      validate(fields()[3], value);
      this.lastName = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'lastName' field has been set.
      * @return True if the 'lastName' field has been set, false otherwise.
      */
    public boolean hasLastName() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'lastName' field.
      * @return This builder.
      */
    public br.com.danielhatanaka.avro.UserAvroDTO.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public UserAvroDTO build() {
      try {
        UserAvroDTO record = new UserAvroDTO();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.String) defaultValue(fields()[0]);
        record.teste = fieldSetFlags()[1] ? this.teste : (java.lang.String) defaultValue(fields()[1]);
        record.teste2 = fieldSetFlags()[2] ? this.teste2 : (java.lang.String) defaultValue(fields()[2]);
        record.lastName = fieldSetFlags()[3] ? this.lastName : (java.lang.String) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<UserAvroDTO>
    WRITER$ = (org.apache.avro.io.DatumWriter<UserAvroDTO>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<UserAvroDTO>
    READER$ = (org.apache.avro.io.DatumReader<UserAvroDTO>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
